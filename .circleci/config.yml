version: 2.1

orbs:
  gh: circleci/github-cli@1.0.2

jobs:
  #done: create another build for the production server, called production-build, which test a different docker-compose for the production server
  #done: create another docker compose for the production server by duplicating staging server's configuration

  staging-build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: "Test staging-docker-compose build"
          command: docker-compose -f staging-docker-compose.yml up -d
      - run: sleep 100
      - run:
          name: "Test database connection"
          command: docker exec $(docker ps -f name=mysql -q) mysql -u root -p$mysql_root_pw
      # - run:
      #     name: "Test website availability"
      #     command: |
      #       res=`curl localhost:8080`

      #       if [ "$?" -ne 0 ]
      #       then
      #         exit 1
      #       fi

      #       if [ "$res" = "404 page not found" ]
      #       then
      #         exit 1
      #       fi
      - gh/setup
      - run:
          name: "Create new pull request"
          command: |
            msg=`git log -1 --pretty=format:"Latest Commit: %s"`
            gh pr create --title "New pull request from dev" --body "$msg" || echo "No need to create a new pull request."

  production-build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: "Test production-docker-compose build"
          command: docker-compose -f production-docker-compose.yml up -d

  #todo: change the name into staging-development-job
  staging-deploy:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8a:45:83:7c:a1:87:b2:cd:cc:1e:f9:f1:d5:1a:4b:21"
      - run:
          name: Deploy to lightsail staging server
          command: |
            ssh $SSH_USER@$SSH_HOST \
            "echo starting the deployment pipeline && \
            cd wordpress/pipeline && \
            git checkout dev && \ 
            git pull && \ 
            sudo docker-compose -f staging-docker-compose.yml up -d && \
            sudo chown -R www-data:www-data wp-content/plugins/ && \
            sudo chmod 775 wp-content && \
            sudo chown -R www-data:www-data wp-content/ && \
            echo deployment is finished"

  #done: create another deployment job for the production server, with different ssh keys, user and host
  #update: no need to change the ssh key since it's only for circleCI to access the project, and change the checkout branch to master
  production-deploy:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "a1:0b:92:bb:27:64:20:fa:f4:7d:a8:aa:94:31:9a:0e"
      - run:
          name: Deploy to lightsail production server
          command: |
            ssh $SSH_USER@$SSH_PROD_HOST \
            "echo starting the production deployment pipeline && \
            cd wordpress/pipeline && \
            git checkout master && \ 
            git pull && \ 
            rm README.md && \ 
            rm *.jpg && \
            rm *.jpeg && \
            sudo docker-compose -f production-docker-compose.yml up -d && \
            sudo chown -R www-data:www-data wp-content/plugins/ && \
            sudo chmod 775 wp-content && \
            sudo chown -R www-data:www-data wp-content/ && \
            echo deployment to production server is finished"

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - staging-build:
          filters:
            branches:
              only:
                - dev
      - staging-deploy:
          requires:
            - staging-build
          filters:
            branches:
              only:
                - dev
                #done: remove the master branch from the staging workflow

      #done: create another deployment workflow for the production server (filter=dev)
      - production-build:
          filters:
            branches:
              only:
                - master
      - production-deploy:
          requires:
            - production-build
          filters:
            branches:
              only:
                - master
