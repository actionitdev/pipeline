version: 2.1

orbs:
  gh: circleci/github-cli@1.0.2

jobs:
  staging-build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: "Test staging-docker-compose build"
          command: docker-compose -f staging-docker-compose.yml up -d
      - run: sleep 100
      - run:
          name: "Test database connection"
          command: docker exec $(docker ps -f name=mysql -q) mysql -u root -p$mysql_root_pw
      - gh/setup
      - run:
          name: "Create new pull request"
          command: |
            msg=`git log -1 --pretty=format:"Latest Commit: %s"`
            gh pr create --title "New pull request from dev" --body "$msg" || echo "No need to create a new pull request."

  production-build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - run:
          name: "Test production-docker-compose build"
          command: docker-compose -f production-docker-compose.yml up -d

  staging-deploy:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8a:45:83:7c:a1:87:b2:cd:cc:1e:f9:f1:d5:1a:4b:21"
      - run:
          name: Deploy to lightsail staging server
          command: |
            ssh $SSH_USER@$SSH_HOST \
            "echo starting the deployment pipeline && \
            cd wordpress/pipeline && \
            git checkout dev && \ 
            git pull && \ 
            sudo chmod 755 dbBackup/staging/backupStagingDB.sh && \
            sudo chmod 755 dbBackup/staging/backupStagingWP.sh && \
            sudo docker-compose -f staging-docker-compose.yml up -d && \
            sudo chown -R www-data:www-data wp-content/plugins/ && \
            sudo chmod 775 wp-content && \
            sudo chown -R www-data:www-data wp-content/ && \
            echo deployment is finished"

  production-deploy:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - add_ssh_keys:
          fingerprints:
            - "a1:0b:92:bb:27:64:20:fa:f4:7d:a8:aa:94:31:9a:0e"
      - run:
          name: Backup the staging server
          command: |
            ssh $SSH_USER@$SSH_HOST \
            "echo backup the staging server && \
             sudo wordpress/pipeline/dbBackup/staging/backupStagingDB.sh $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY $S3_REGION $MYSQL_STAGING_PORT $MYSQL_STAGING_USER $MYSQL_STAGING_PASSWORD $MYSQL_STAGING_DATABASE && \
             sudo wordpress/pipeline/dbBackup/staging/backupStagingWP.sh $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY $S3_REGION && \
             echo backup workflow for the staging server is completed"
      - run:
          name: Migrate sql and wp-content from staging to the production server
          command: |
            ssh $SSH_USER@$SSH_HOST \
            "echo starting the migration process && \
            cd wordpress/pipeline && \
            sudo zip -r wp-content-staging.zip wp-content && \
            sudo docker exec mysql /usr/bin/mysqldump -u wpadmin --password=adminpw --no-tablespaces wp > dumpfile.staging.sql && gzip dumpfile.staging.sql && \
            sudo scp -i ~/.ssh/pems/ai-sandbox-production.pem wp-content-staging.zip ubuntu@3.104.75.134:/home/ubuntu/ && \ 
            sudo scp -i ~/.ssh/pems/ai-sandbox-production.pem dumpfile.staging.sql.gz ubuntu@3.104.75.134:/home/ubuntu/ && \ 
            rm wp-content-staging.zip && \ 
            rm dumpfile.staging.sql.gz && \
            echo migration process is completed"

      - run:
          name: Deploy to the production server
          command: |
            ssh $SSH_USER@$SSH_PROD_HOST \
            "echo starting the deployment pipeline && \
            cd wordpress/pipeline && \
            rm -rf wp-content && \
            sudo unzip -f /home/ubuntu/wp-content-staging.zip && \
            git checkout dev && \ 
            git fetch --all && \
            git reset --hard origin/dev && \
            git pull && \ 
            rm .init/dumpfile.sql.gz && \
            mv ~/dumpfile.staging.sql.gz .init && \ 
            sudo docker-compose -f production-docker-compose.yml up -d && \
            echo deployment to production server is finished"
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - staging-build:
          filters:
            branches:
              only:
                - dev
      - staging-deploy:
          requires:
            - staging-build
          filters:
            branches:
              only:
                - dev

      - production-build:
          requires:
            - staging-deploy
          filters:
            branches:
              only:
                - dev
      - production-deploy:
          requires:
            - production-build
          filters:
            branches:
              only:
                - dev
